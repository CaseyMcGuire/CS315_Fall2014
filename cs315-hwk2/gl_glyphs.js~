//CORE VARIABLES
var canvas;
var gl;

//program handle
var shaderProgram;

//a hash containing all the glyphs we'll be using
var glyphs = {};


function init(){
  //initialize canvas and webgl
  canvas = $('#glcanvas')[0]; //first element from jquery selector
  gl = WebGLUtils.setupWebGL( canvas );
  if (!gl) { alert("Unable to initialize WebGL. Your browser may not support it."); return; }

  //basic window parameters
  gl.clearColor(1.0,  1.0,  1.0,  1.0); //white background
  gl.viewport(0, 0, canvas.width, canvas.height); //viewport setup

  //initialize shaders
  shaderProgram = ShaderUtils.initShaders(gl, 'shaders/glyph_scaled.vert', 'shaders/glyph.frag'); //load shaders
  if (shaderProgram < 0) { alert('Unable to initialize shaders.'); return; }
  gl.useProgram(shaderProgram); //specify to use the shaders

  //grab handles for later (store in the program object to keep organized)
  shaderProgram.vertexPositionHandle = gl.getAttribLocation(shaderProgram, "aPosition");
  shaderProgram.glyphSizeHandle = gl.getUniformLocation(shaderProgram,"uGlyphSize");


  
  // YOUR CODE HERE!



}

/**
 * Renders the given glyph
 * @param  {[Object]} glyph The glyph to render
 * @param  {[Number]} offset The right-offset for positioning the glyph on the screen. Screen has a width of 2.
 * @param  {[Number]} scale  A factor to scale the glyph by (from screen-height)
 */
function drawGlyph(glyph, offset, scale) {


  // YOUR CODE HERE!


}

/**
 * Draws the glyphs that make up the given string. Includes calculations of appropriate scale factors and offsets
 * @param  {[String]} chars A string of characters to render
 */
function drawString(chars) {
  //calculate total "size" of string to determine offsets/scale
  var SPACING = 0.1;

  var totalSize = 0;
  var i;
  for(i=0; i<chars.length; i++) {
    totalSize += glyphs[chars[i]].size[0]/glyphs[chars[i]].size[1];
  }
  totalSize += SPACING*(chars.length+1);

  //calculate scaling factor
  scale = Math.min(2/totalSize,1.0); //max size is 100% of display

  var offset = Math.max(SPACING*scale, 1-(totalSize/2 - SPACING)); //min initial offset enough to center
  for(i=0; i<chars.length; i++) {
    var glyph = glyphs[chars[i]];
    drawGlyph(glyph, offset, scale);
    offset += (glyph.size[0]/glyph.size[1])*scale;
    offset += SPACING*scale;
  }
}


/**
 * Renders the scene
 */
function render(){
  gl.clear(gl.COLOR_BUFFER_BIT); //clear previous rendering

  drawString(''); //draw this string
}


//once everything is ready, run the script
$(document).ready(function(){
  init(); //initialize everything
  render(); //start drawing
});

